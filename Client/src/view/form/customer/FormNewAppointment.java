/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view.form.customer;

import controller.Communication;
import domain.Appointment;
import domain.AppointmentItem;
import domain.AppointmentStatusEnum;
import domain.Hairdresser;
import domain.ServiceType;
import domain.User;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import validator.IValidator;
import validator.ValidatorException;
import validator.components.RegularValidator;
import view.components.TableModelAppointmentItem;

/**
 *
 * @author Nikolina
 */
public class FormNewAppointment extends javax.swing.JFrame {

    User user;
    Double totalDuration = 0.0;
    BigDecimal totalPrice = new BigDecimal("0");
    List<ServiceType> usedServices;
    IValidator validator;
    Hairdresser hairdresser;
    List<Appointment> allAppointments;
    LocalDate date;

    /**
     * Creates new form FormNewAppointment
     */
    public FormNewAppointment() {
        initComponents();
        prepareForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblUser = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblService = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbHairdresser = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        cmbService = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lblTotalPrice = new javax.swing.JLabel();
        lblTotalDuration = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        datePicker = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cmbStartHour = new javax.swing.JComboBox<>();
        btnSelectTime = new javax.swing.JButton();
        btnChangeDate = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnMenu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("New appointment");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("User: ");

        lblUser.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblUser.setText("Firstname+Lastname");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 102, 102), null));

        tblService.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblService);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 102, 102));
        jLabel6.setText("Step 1. Select hairdresser and type of service");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Hairdresser:");

        jLabel7.setText("Service type:");

        jLabel10.setForeground(new java.awt.Color(255, 102, 102));
        jLabel10.setText("Total duration:");

        jLabel11.setForeground(new java.awt.Color(255, 102, 102));
        jLabel11.setText("Total price:");

        lblTotalPrice.setForeground(new java.awt.Color(255, 102, 102));
        lblTotalPrice.setText("labela Total price");

        lblTotalDuration.setForeground(new java.awt.Color(255, 102, 102));
        lblTotalDuration.setText("labela Total duration");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnEdit.setText(" Edit Step 1");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbService, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbHairdresser, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblTotalDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(18, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cmbHairdresser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cmbService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd)
                    .addComponent(btnRemove))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(lblTotalDuration))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTotalPrice)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(btnEdit)))
                .addGap(27, 27, 27))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 51, 51), null));

        jLabel5.setText("Date:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 102, 102));
        jLabel8.setText("Step 2. Select date and time of your appointment");

        jLabel9.setText("Start hour:");

        btnSelectTime.setText("Select time");
        btnSelectTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectTimeActionPerformed(evt);
            }
        });

        btnChangeDate.setText("Change date");
        btnChangeDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeDateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(datePicker, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                            .addComponent(cmbStartHour, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnChangeDate, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(btnSelectTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(128, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(btnSelectTime))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbStartHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnChangeDate)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        btnSave.setBackground(new java.awt.Color(255, 204, 204));
        btnSave.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnMenu.setText("jButton1");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnSave))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel2)
                                        .addGap(27, 27, 27)
                                        .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblUser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            TableModelAppointmentItem model = (TableModelAppointmentItem) tblService.getModel();
            usedServices = model.getServices();
            try {
                validator.validateAppointment(cmbHairdresser.getSelectedIndex(), cmbStartHour.getSelectedIndex(), datePicker.getDate(), usedServices);
            } catch (ValidatorException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Please try again", JOptionPane.ERROR_MESSAGE);
            }

            Appointment appointment = new Appointment();
            appointment.setHairdresser(hairdresser);
            appointment.setCreatedOn(LocalDateTime.now());
            appointment.setDate(date);
            appointment.setStart_time((int) cmbStartHour.getSelectedItem());
            appointment.setEnd_time((int) (totalDuration + appointment.getStart_time()));
            appointment.setStatus(AppointmentStatusEnum.SCHEDULED);
            appointment.setTotalPrice(totalPrice);
            appointment.setUser(user);

            List<AppointmentItem> ai = new ArrayList<>();

            for (ServiceType service : usedServices) {
                AppointmentItem item = new AppointmentItem();
                item.setAppointment(appointment);
                item.setPrice(totalPrice);
                item.setServiceType(service);
                ai.add(item);
            }

            appointment.setItems(ai);

            appointment = Communication.getInstance().createAppointment(appointment);
            if (appointment == null) {
                JOptionPane.showMessageDialog(this, "The system didn't created new appointment", "", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                JOptionPane.showMessageDialog(this, "The system successfully created new appointment", "", JOptionPane.INFORMATION_MESSAGE);

                cmbHairdresser.setSelectedItem(-1);
                cmbService.setSelectedItem(-1);
                datePicker.setEnabled(true);
                cmbStartHour.setVisible(false);
                btnChangeDate.setVisible(false);
                btnSelectTime.setVisible(true);
            }
        } catch (Exception ex) {
            Logger.getLogger(FormNewAppointment.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed

        if (cmbService.getSelectedIndex() != -1) {
            ServiceType selectedService = (ServiceType) cmbService.getSelectedItem();
            TableModelAppointmentItem model = (TableModelAppointmentItem) tblService.getModel();
            model.addService(selectedService);

            cmbService.removeItem(selectedService);
            cmbService.setSelectedIndex(-1);
            updateLable(1, selectedService);

        } else {
            JOptionPane.showConfirmDialog(this, "Please select the service ", "No service selected", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        if (tblService.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please select a service from the table", "No service selected", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (tblService.getSelectedRowCount() > 1) {
            JOptionPane.showMessageDialog(this, "Please select only one service from the table", "Multiple services selected", JOptionPane.ERROR_MESSAGE);
            return;
        }

        TableModelAppointmentItem model = (TableModelAppointmentItem) tblService.getModel();
        ServiceType selected = model.removeService(tblService.getSelectedRow());
        cmbService.addItem(selected);
        updateLable(0, selected);

    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnSelectTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectTimeActionPerformed
        cmbStartHour.removeAllItems();
        btnEdit.setVisible(true);
        List<Appointment> appointmentsDate = null;
        Date dateUnprep = datePicker.getDate();
        date = dateUnprep.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        cmbHairdresser.setEnabled(false);
        cmbService.setEnabled(false);
        btnAdd.setEnabled(false);
        btnRemove.setEnabled(false);

        hairdresser = (Hairdresser) cmbHairdresser.getSelectedItem();
        datePicker.setEnabled(false);
        cmbStartHour.setVisible(true);
        btnChangeDate.setVisible(true);
        btnSelectTime.setVisible(false);

        try {
            validator.validateDate(date);
        } catch (ValidatorException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Incorrect date", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //creating additional list with the same date as selected 
        appointmentsDate = new ArrayList<>();

        if (allAppointments != null) {
            for (Appointment appointment : allAppointments) {
                if (appointment.getDate().equals(date) && appointment.getHairdresser().getId() == hairdresser.getId()) {
                    appointmentsDate.add(appointment);
                }
            }
            //System.out.println("btn apDATE "+ appointmentsDate);
            appointmentsDate.sort((a1, a2) -> Integer.compare(a1.getStart_time(), a2.getStart_time()));
        }
        List<Integer> slots = selectTime(appointmentsDate);

        for (Integer slot : slots) {
            cmbStartHour.addItem(slot);
        }


    }//GEN-LAST:event_btnSelectTimeActionPerformed

    private void btnChangeDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeDateActionPerformed
        datePicker.setEnabled(true);
        cmbStartHour.setVisible(false);
        btnChangeDate.setVisible(false);
        btnSelectTime.setVisible(true);
    }//GEN-LAST:event_btnChangeDateActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        cmbHairdresser.setEnabled(true);
        btnEdit.setVisible(false);
        cmbService.setEnabled(true);
        btnAdd.setEnabled(true);
        btnRemove.setEnabled(true);

        datePicker.setEnabled(true);
        cmbStartHour.setVisible(false);
        btnChangeDate.setVisible(false);
        btnSelectTime.setVisible(true);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        new FormMainCustomer().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnMenuActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChangeDate;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSelectTime;
    private javax.swing.JComboBox cmbHairdresser;
    private javax.swing.JComboBox cmbService;
    private javax.swing.JComboBox<Integer> cmbStartHour;
    private com.toedter.calendar.JDateChooser datePicker;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTotalDuration;
    private javax.swing.JLabel lblTotalPrice;
    private javax.swing.JLabel lblUser;
    private javax.swing.JTable tblService;
    // End of variables declaration//GEN-END:variables

    private void prepareForm() {
        setLocationRelativeTo(null);
        setResizable(false);
        lblTotalDuration.setText("");
        lblTotalPrice.setText("");
        btnEdit.setVisible(false);

        usedServices = new ArrayList<>();

        //setting logged in user
        user = Communication.getInstance().getCurrentUser();
        lblUser.setText(user.getFirstname() + " " + user.getLastname());
        validator = new RegularValidator();
        populateComboHairdresser();
        populateComboServiceType();
        populateTable();
        dateAndTime();
        getAppointments();
    }

    private void populateComboHairdresser() {
        List<Hairdresser> hairdressers;

        try {
            hairdressers = Communication.getInstance().getAllHairdressers();

            for (Hairdresser h : hairdressers) {
                if(h.getStatus().toString().toLowerCase().equals("active"))
                cmbHairdresser.addItem(h);
            }
            cmbHairdresser.setSelectedIndex(-1);
        } catch (Exception ex) {
            Logger.getLogger(FormNewAppointment.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void populateComboServiceType() {
        try {
            List<ServiceType> services = Communication.getInstance().getAlllServiceTypes();
            for (ServiceType h : services) {
                cmbService.addItem(h);
            }
            cmbService.setSelectedIndex(-1);
        } catch (Exception ex) {
            Logger.getLogger(FormNewAppointment.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void populateTable() {
        TableModelAppointmentItem model = new TableModelAppointmentItem();
        tblService.setModel(model);
    }

    private void updateLable(int i, ServiceType selectedService) {

        if (i == 1) {
            totalDuration = totalDuration + selectedService.getDuration();
            totalPrice = totalPrice.add(selectedService.getPrice());
            lblTotalDuration.setText(String.valueOf(totalDuration));
            lblTotalPrice.setText(totalPrice.toString());
        }
        if (i == 0) {
            totalDuration = totalDuration - selectedService.getDuration();
            totalPrice = totalPrice.subtract(selectedService.getPrice());
            lblTotalDuration.setText(String.valueOf(totalDuration));
            lblTotalPrice.setText(totalPrice.toString());
        }
    }

    private void dateAndTime() {

        //dodati validaciju da ne moze da se izabere datum iz proslosti
        cmbStartHour.setVisible(false);
        btnChangeDate.setVisible(false);
        cmbStartHour.setSelectedIndex(-1);

    }

    private List<Integer> selectTime(List<Appointment> appointmentsDate) {
        List<Integer> freeSlots = new ArrayList<>();
        int potStart = 9;
        int potEnd;
        //no appointments

        if (appointmentsDate == null || appointmentsDate.isEmpty()) {
            potEnd = 21;
            while (potEnd - potStart >= totalDuration) {
                freeSlots.add(potStart);
                potStart++;
            }
            return freeSlots;
        }
        //one appointment
        if (appointmentsDate.size() == 1) {
            potEnd = 21;
            while (appointmentsDate.get(0).getStart_time() - potStart >= totalDuration) {
                freeSlots.add(potStart);
                potStart++;
            }

            potStart = appointmentsDate.get(0).getEnd_time();
            while (21 - potStart >= totalDuration) {
                freeSlots.add(potStart);
                potStart++;
            }
            return freeSlots;
        }

        //multiple appointments
        if (appointmentsDate.size() > 2) {
            potStart = 9;
            for (int i = 0; i < appointmentsDate.size(); i++) {
                potEnd = appointmentsDate.get(i).getStart_time();
                while (potEnd - potStart >= totalDuration) {
                    freeSlots.add(potStart);
                    potStart++;
                }
            }
            potStart = appointmentsDate.get(appointmentsDate.size() - 1).getEnd_time();
            potEnd = 21;
            while (21 - potStart >= totalDuration) {
                freeSlots.add(potStart);
                potStart++;
            }
            return freeSlots;

        }

        return freeSlots;
    }

    private void getAppointments() {
        allAppointments = null;
        try {
            allAppointments = Communication.getInstance().getAllAppointments();
        } catch (Exception ex) {
            Logger.getLogger(FormNewAppointment.class.getName()).log(Level.SEVERE, null, ex);
        }
        // System.out.println(allAppointments);
    }
}
