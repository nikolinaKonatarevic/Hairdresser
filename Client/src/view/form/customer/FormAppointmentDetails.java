/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package view.form.customer;

import controller.Communication;
import domain.Appointment;
import domain.AppointmentDTO;
import domain.AppointmentItem;
import domain.AppointmentStatusEnum;
import domain.ServiceType;
import domain.User;
import java.awt.Frame;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import validator.IValidator;
import validator.ValidatorException;
import validator.components.RegularValidator;
import view.components.TableModelAppointmentItem;

/**
 *
 * @author Nikolina
 */
public class FormAppointmentDetails extends javax.swing.JDialog {

    IValidator validator;
    User user;
    Appointment appointment;
    List<AppointmentItem> updatedList;
    List<AppointmentItem> deletedItems;
    List<AppointmentItem> saveItems;
    double totalDuration;
    BigDecimal totalPrice;
    List<Appointment> allAppointments;
    List<AppointmentItem> orgAppointmentItems;
    List<Appointment> appointmentsDate;
    LocalDate localDate;

    /**
     * Creates new form FormAppointmentDetails
     */
    public FormAppointmentDetails(Frame parent, boolean modal, Appointment selectedAppointment) {
        super(parent, modal);
        initComponents();
        this.getParent().setVisible(false);
        appointment = selectedAppointment;

        updatedList = appointment.getItems();
        copyItems();
        System.out.println(orgAppointmentItems.size());
        localDate = appointment.getDate();
        prepareForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        btnMenu = new javax.swing.JButton();
        btnChangeService = new javax.swing.JButton();
        cmbServices = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblServices = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        datePicker = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        cmbStartHour = new javax.swing.JComboBox<>();
        btnChangeDate = new javax.swing.JButton();
        btnSaveDate = new javax.swing.JButton();
        btnSelectTime = new javax.swing.JButton();
        btnChangeDate1 = new javax.swing.JButton();
        btnCancelDate = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtHairdresser = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtTotalPrice = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtTotalDuration = new javax.swing.JTextField();
        btnAddService = new javax.swing.JButton();
        btnRemoveService = new javax.swing.JButton();
        btnSaveAppointment = new javax.swing.JButton();
        lblUser = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnSaveService = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel7.setText("Service Types");

        btnMenu.setText("jButton1");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });

        btnChangeService.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnChangeService.setText("Change services");
        btnChangeService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeServiceActionPerformed(evt);
            }
        });

        tblServices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblServices);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Date and Time of the Appointment"));

        jLabel5.setText("Date:");

        jLabel9.setText("Start hour:");

        btnChangeDate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnChangeDate.setText("Change date");
        btnChangeDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeDateActionPerformed(evt);
            }
        });

        btnSaveDate.setBackground(new java.awt.Color(255, 204, 204));
        btnSaveDate.setText("Save date and time");
        btnSaveDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveDateActionPerformed(evt);
            }
        });

        btnSelectTime.setText("Select time");
        btnSelectTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectTimeActionPerformed(evt);
            }
        });

        btnChangeDate1.setText("Change date");
        btnChangeDate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeDate1ActionPerformed(evt);
            }
        });

        btnCancelDate.setText("Cancel");
        btnCancelDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelDateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnChangeDate)
                        .addGap(61, 61, 61)
                        .addComponent(btnCancelDate)
                        .addGap(18, 18, 18)
                        .addComponent(btnSaveDate, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(datePicker, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbStartHour, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnChangeDate1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSelectTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSelectTime)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel5)
                        .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbStartHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(btnChangeDate1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnChangeDate)
                    .addComponent(btnSaveDate)
                    .addComponent(btnCancelDate))
                .addGap(14, 14, 14))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("General information"));

        jLabel3.setText("Hairdresser");

        jLabel4.setText("Total price: ");

        jLabel6.setText("Total duration: ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(txtTotalDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(txtHairdresser, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(28, 28, 28))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtHairdresser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtTotalDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        btnAddService.setText("Add");
        btnAddService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddServiceActionPerformed(evt);
            }
        });

        btnRemoveService.setText("Remove");
        btnRemoveService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveServiceActionPerformed(evt);
            }
        });

        btnSaveAppointment.setBackground(new java.awt.Color(255, 153, 153));
        btnSaveAppointment.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSaveAppointment.setText("Save appointment");
        btnSaveAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAppointmentActionPerformed(evt);
            }
        });

        lblUser.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblUser.setText("Firstname+Lastname");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("User: ");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Details appointment");

        btnSaveService.setBackground(new java.awt.Color(255, 204, 204));
        btnSaveService.setText("Save Services");
        btnSaveService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveServiceActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jButton1.setText("Cancel appointment");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbServices, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(272, 272, 272)
                        .addComponent(btnAddService)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemoveService)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSaveService))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnChangeService, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancel)))
                .addGap(18, 18, 18))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btnSaveAppointment)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblUser))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(btnCancel)
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnChangeService)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(btnAddService)
                    .addComponent(btnRemoveService)
                    .addComponent(btnSaveService)
                    .addComponent(cmbServices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveAppointment)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        new FormMainCustomer().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnMenuActionPerformed

    private void btnChangeServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeServiceActionPerformed
        btnCancel.setVisible(true);
        btnChangeService.setVisible(false);
        cmbServices.setVisible(true);
        btnAddService.setVisible(true);
        btnRemoveService.setVisible(true);
        btnSaveService.setVisible(true);
        btnChangeDate.setVisible(false);
    }//GEN-LAST:event_btnChangeServiceActionPerformed

    private void btnAddServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddServiceActionPerformed
        if (cmbServices.getSelectedIndex() != -1) {
            ServiceType selectedService = (ServiceType) cmbServices.getSelectedItem();
            TableModelAppointmentItem model = (TableModelAppointmentItem) tblServices.getModel();
            model.addService(selectedService);

            cmbServices.removeItem(selectedService);
            cmbServices.setSelectedIndex(-1);
            updateAtributes(1, selectedService);
            AppointmentItem newApp = new AppointmentItem();
            newApp.setAppointment(appointment);
            newApp.setPrice(selectedService.getPrice());
            newApp.setServiceType(selectedService);
            System.out.println(newApp.getId());
            updatedList.add(newApp);

            //System.out.println("Add Service : list of services " + updatedList.size());
        } else {
            JOptionPane.showConfirmDialog(this, "Please select the service ", "No service selected", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddServiceActionPerformed

    private void btnRemoveServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveServiceActionPerformed
        if (tblServices.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please select a service from the table", "No service selected", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (tblServices.getSelectedRowCount() > 1) {
            JOptionPane.showMessageDialog(this, "Please select only one service from the table", "Multiple services selected", JOptionPane.ERROR_MESSAGE);
            return;
        }

        TableModelAppointmentItem model = (TableModelAppointmentItem) tblServices.getModel();
        ServiceType selected = model.removeService(tblServices.getSelectedRow());
        cmbServices.addItem(selected);
        updateAtributes(0, selected);
        for (int i = 0; i < updatedList.size(); i++) {
            if (updatedList.get(i).getServiceType().getName().equals(selected.getName())) {

                updatedList.remove(i);

            }
        }


    }//GEN-LAST:event_btnRemoveServiceActionPerformed

    private void btnSaveAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAppointmentActionPerformed

        //preparing items
        saveItems = new ArrayList<>();
        deletedItems = new ArrayList<>();

        for (AppointmentItem appointmentItem : updatedList) {
            if (!orgAppointmentItems.contains(appointmentItem)) {
                saveItems.add(appointmentItem);
            }
        }

        for (AppointmentItem appointmentItem : orgAppointmentItems) {
            if (!updatedList.contains(appointmentItem) && appointmentItem.getId() != 0) {
                deletedItems.add(appointmentItem);
            }
        }
        if(saveItems.isEmpty()&&deletedItems.isEmpty()&&appointment.getDate().isEqual(localDate) &&appointment.getStart_time() ==(int) cmbStartHour.getSelectedItem()){
            JOptionPane.showMessageDialog(this, "There were no changes made");
            return;
        }

        appointment.setItems(orgAppointmentItems);
        appointment.setDate(localDate);
        appointment.setStart_time((int) cmbStartHour.getSelectedItem());
        appointment.setEnd_time((int) (appointment.getStart_time() + totalDuration));

        AppointmentDTO dto = new AppointmentDTO(appointment, saveItems, deletedItems);

        try {
            Appointment newAppointment = Communication.getInstance().updateAppointment(dto);
            if (newAppointment == null) {
                JOptionPane.showMessageDialog(this, "System couldn't save the appointment"," Not saved", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                JOptionPane.showConfirmDialog(this, "Succesfully changes", "Succesfuly", JOptionPane.INFORMATION_MESSAGE);

            }
        } catch (Exception ex) {
            Logger.getLogger(FormAppointmentDetails.class.getName()).log(Level.SEVERE, null, ex);
        }

        FormViewAppointments form = (FormViewAppointments) this.getParent();
        form.setVisible(true);
        form.prepareForm();
        this.dispose();
    }//GEN-LAST:event_btnSaveAppointmentActionPerformed

    private void btnSaveServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveServiceActionPerformed
        //implement validation if there is no service removed or added
        btnChangeDate.setVisible(true);
        checkDateTime();
    }//GEN-LAST:event_btnSaveServiceActionPerformed

    private void btnChangeDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeDateActionPerformed
        btnChangeDate.setVisible(false);
        datePicker.setEnabled(true);
        btnCancelDate.setVisible(true);
        btnChangeDate1.setVisible(false);
        btnSelectTime.setVisible(true);
        btnChangeService.setVisible(false);

    }//GEN-LAST:event_btnChangeDateActionPerformed

    private void btnSelectTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectTimeActionPerformed
        Date dateUnprep = datePicker.getDate();
        localDate = dateUnprep.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        try {
            validator.validateDate(localDate);
        } catch (ValidatorException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Incorrect date", JOptionPane.ERROR_MESSAGE);
            return;
        }

        datePicker.setEnabled(false);
        btnChangeDate1.setVisible(true);
        btnSelectTime.setVisible(false);
        cmbStartHour.removeAllItems();
        cmbStartHour.setEnabled(true);
        btnSaveDate.setVisible(true);

        //creating additional list with the same date as selected
        appointmentsDate = new ArrayList<>();

        if (allAppointments != null) {
            for (Appointment appointment : allAppointments) {
                if (appointment.getDate().equals(localDate) && appointment.getHairdresser().getId() == appointment.getHairdresser().getId()) {
                    appointmentsDate.add(appointment);
                }
            }
            //System.out.println("btn apDATE "+ appointmentsDate);
            appointmentsDate.sort((a1, a2) -> Integer.compare(a1.getStart_time(), a2.getStart_time()));
        }
        List<Integer> slots = selectTime(appointmentsDate);

        for (Integer slot : slots) {
            cmbStartHour.addItem(slot);
        }


    }//GEN-LAST:event_btnSelectTimeActionPerformed

    private void btnChangeDate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeDate1ActionPerformed
        btnChangeDate1.setVisible(false);
        datePicker.setEnabled(true);
        cmbStartHour.setEnabled(false);
        btnChangeDate.setVisible(false);
        btnSelectTime.setVisible(true);
        btnSaveDate.setVisible(false);
    }//GEN-LAST:event_btnChangeDate1ActionPerformed

    private void btnSaveDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveDateActionPerformed
        appointment.setDate(localDate);
        if(cmbStartHour.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(this, "Please select start time", "No time selected", JOptionPane.ERROR_MESSAGE);
            return;
        }
        appointment.setStart_time((int) cmbStartHour.getSelectedItem());
        appointment.setEnd_time((int) (appointment.getStart_time() + totalDuration));
        dateInformation();
        prepareServiceType();

    }//GEN-LAST:event_btnSaveDateActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        prepareServiceType();
        btnChangeDate.setVisible(true);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnCancelDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelDateActionPerformed
        dateInformation();
        btnChangeService.setVisible(true);
    }//GEN-LAST:event_btnCancelDateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        appointment.setStatus(AppointmentStatusEnum.CANCELED);
        AppointmentDTO dto = new AppointmentDTO(appointment, null, null);
        try {
            appointment = Communication.getInstance().updateAppointment(dto);
            if(appointment== null){
                 JOptionPane.showMessageDialog(this, "Appointment isn't canceled", "Not canceled", JOptionPane.ERROR_MESSAGE);
            return;
            } else{
           JOptionPane.showMessageDialog(this, "Successfully canceled");
            return;
            }
        } catch (Exception ex) {
            Logger.getLogger(FormAppointmentDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
                
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddService;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCancelDate;
    private javax.swing.JButton btnChangeDate;
    private javax.swing.JButton btnChangeDate1;
    private javax.swing.JButton btnChangeService;
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton btnRemoveService;
    private javax.swing.JButton btnSaveAppointment;
    private javax.swing.JButton btnSaveDate;
    private javax.swing.JButton btnSaveService;
    private javax.swing.JButton btnSelectTime;
    private javax.swing.JComboBox cmbServices;
    private javax.swing.JComboBox<Integer> cmbStartHour;
    private com.toedter.calendar.JDateChooser datePicker;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblUser;
    private javax.swing.JTable tblServices;
    private javax.swing.JTextField txtHairdresser;
    private javax.swing.JTextField txtTotalDuration;
    private javax.swing.JTextField txtTotalPrice;
    // End of variables declaration//GEN-END:variables

    private void prepareForm() {

        user = Communication.getInstance().getCurrentUser();
        lblUser.setText(user.getFirstname() + " " + user.getLastname());
        validator = new RegularValidator();
        setLocationRelativeTo(null);
        setResizable(false);
        getAppointments();
        generalInformation();
        dateInformation();
        prepareServiceType();

    }

    private void generalInformation() {
        txtHairdresser.setEnabled(false);
        txtHairdresser.setText(appointment.getHairdresser().getFirstname() + " " + appointment.getHairdresser().getLastname());
        totalDuration = appointment.getEnd_time() - appointment.getStart_time();
        txtTotalDuration.setEnabled(false);
        txtTotalDuration.setText(String.valueOf(totalDuration));
        totalPrice = appointment.getTotalPrice();
        txtTotalPrice.setEnabled(false);
        txtTotalPrice.setText(totalPrice + "");

    }

    private void dateInformation() {

        ZoneId zoneId = ZoneId.systemDefault();
        ZonedDateTime zonedDateTime = appointment.getDate().atStartOfDay(zoneId);
        Date date = Date.from(zonedDateTime.toInstant());
        datePicker.setDate(date);
        datePicker.setEnabled(false);

        cmbStartHour.addItem(appointment.getStart_time());
        cmbStartHour.setSelectedItem(0);
        cmbStartHour.setEnabled(false);

        btnChangeDate1.setVisible(false);
        btnSaveDate.setVisible(false);
        btnSelectTime.setVisible(false);
        btnChangeDate.setVisible(true);
        btnCancelDate.setVisible(false);
    }

    private void prepareTable() {
        TableModelAppointmentItem model = new TableModelAppointmentItem();
        tblServices.setModel(model);

        for (AppointmentItem item : updatedList) {
            model.addService(item.getServiceType());
        }
    }

    private void prepareServiceComboBox() {
        cmbServices.removeAllItems();
        try {
            List<ServiceType> services = Communication.getInstance().getAlllServiceTypes();
            for (ServiceType h : services) {
                if (!isServiceAdded(h)) {
                    cmbServices.addItem(h);
                }
            }
            cmbServices.setSelectedIndex(-1);
        } catch (Exception ex) {
            Logger.getLogger(FormNewAppointment.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean isServiceAdded(ServiceType service) {
        for (AppointmentItem addedAppointment : updatedList) {
            if (addedAppointment.getServiceType().getName().equals(service.getName())) {
                return true;
            }
        }
        return false;
    }

    private void updateAtributes(int i, ServiceType selectedService) {
        if (i == 1) {

            totalDuration = totalDuration + selectedService.getDuration();
            txtTotalDuration.setText(String.valueOf(totalDuration));

            totalPrice = totalPrice.add(selectedService.getPrice());
            txtTotalPrice.setText(String.valueOf(totalPrice));

        }
        if (i == 0) {
            totalDuration = totalDuration - selectedService.getDuration();
            txtTotalDuration.setText(String.valueOf(totalDuration));

            totalPrice = totalPrice.subtract(selectedService.getPrice());
            txtTotalPrice.setText(String.valueOf(totalPrice));
        }
    }

    private void getAppointments() {
        List<Appointment> draft = null;
        allAppointments = new ArrayList<>();
        try {
            draft = Communication.getInstance().getAllAppointments();
            for (Appointment a : draft) {
                if(a.getStatus().equals(AppointmentStatusEnum.SCHEDULED))
                    allAppointments.add(a);
            }
        } catch (Exception ex) {
            Logger.getLogger(FormNewAppointment.class.getName()).log(Level.SEVERE, null, ex);
        }
        //System.out.println(allAppointments.size());
    }

    private void checkDateTime() {
        Date dateUnprep = datePicker.getDate();
        LocalDate date = dateUnprep.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

        appointmentsDate = new ArrayList<>();

        if (allAppointments != null) {
            for (Appointment a : allAppointments) {
                if (a.getDate().equals(date) && a.getHairdresser().getId() == appointment.getHairdresser().getId()) {
                    appointmentsDate.add(a);
                }
            }
            //System.out.println("btn apDATE "+ appointmentsDate);
            appointmentsDate.sort((a1, a2) -> Integer.compare(a1.getStart_time(), a2.getStart_time()));

            if (chechDate(appointmentsDate)) {
                prepareServiceType();
            } else {
                int response = JOptionPane.showConfirmDialog(
                        this,
                        "You can't schedule this appointment for the current date and time.\nDo you want to select another date or time?",
                        "Invalid Appointment",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE);

                if (response == JOptionPane.YES_OPTION) {
                    prepareServiceType();
                    updateDateInfo();

                } else {
                    updatedList = appointment.getItems();
                    prepareServiceType();

                }

            }
        } else {
            System.out.println("Nema greska u checkdatetime");
        }
    }

    private boolean chechDate(List<Appointment> appointmentsDate) {
        // System.out.println("check date + appointmentsdate size "+ appointmentsDate.size());
        if (appointmentsDate.size() == 1) {
            return true;
        }

        if (appointmentsDate.get(appointmentsDate.size() - 1).getId() == appointment.getId()) {
            if (appointment.getStart_time() + totalDuration <= 21) {
                return true;

            } else {
                return false;
            }

        }

        for (int i = 0; i < appointmentsDate.size(); i++) {
            if (appointmentsDate.get(i).getId() == appointment.getId()) {
                if (appointment.getStart_time() + totalDuration <= appointmentsDate.get(i + 1).getStart_time()) {
                    return true;
                }
            }
        }

        return false;
    }

    private void prepareServiceType() {
        btnCancel.setVisible(false);
        btnSaveService.setVisible(false);
        cmbServices.setVisible(false);
        btnAddService.setVisible(false);
        btnRemoveService.setVisible(false);
        btnChangeService.setVisible(true);
        prepareTable();
        prepareServiceComboBox();
    }

    private List<Integer> selectTime(List<Appointment> appointmentsDate) {
        List<Integer> freeSlots = new ArrayList<>();
        int potStart = 9;
        int potEnd;
        //no appointments

        if (appointmentsDate == null || appointmentsDate.isEmpty()) {
            potEnd = 21;
            while (potEnd - potStart >= totalDuration) {
                freeSlots.add(potStart);
                potStart++;
            }
            return freeSlots;
        }
        //one appointment
        if (appointmentsDate.size() == 1) {
            potEnd = 21;
            while (appointmentsDate.get(0).getStart_time() - potStart >= totalDuration) {
                freeSlots.add(potStart);
                potStart++;
            }

            potStart = appointmentsDate.get(0).getEnd_time();
            while (21 - potStart >= totalDuration) {
                freeSlots.add(potStart);
                potStart++;
            }
            return freeSlots;
        }

        //multiple appointments
        if (appointmentsDate.size() > 2) {
            potStart = 9;
            for (int i = 0; i < appointmentsDate.size(); i++) {
                potEnd = appointmentsDate.get(i).getStart_time();
                while (potEnd - potStart >= totalDuration) {
                    freeSlots.add(potStart);
                    potStart++;
                }
            }
            potStart = appointmentsDate.get(appointmentsDate.size() - 1).getEnd_time();
            potEnd = 21;
            while (21 - potStart >= totalDuration) {
                freeSlots.add(potStart);
                potStart++;
            }
            return freeSlots;

        }

        return freeSlots;
    }

    private void updateDateInfo() {

        datePicker.setEnabled(true);
        btnSelectTime.setVisible(true);
        btnChangeDate1.setVisible(false);

    }

    private void copyItems() {
        orgAppointmentItems = new ArrayList<>();
        for (AppointmentItem appointmentItem : updatedList) {
            AppointmentItem item = new AppointmentItem(appointmentItem.getId(), appointmentItem.getAppointment(), appointmentItem.getPrice(), appointmentItem.getServiceType());
            orgAppointmentItems.add(item);
        }
    }

}
